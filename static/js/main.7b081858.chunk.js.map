{"version":3,"sources":["store/actions/index.js","components/Tasks/index.js","components/Comments/index.js","components/MainApp/index.js","store/reducers/index.js","App.js","serviceWorker.js","index.js"],"names":["deleteTask","task","type","payload","Tasks","connect","state","getQuantity","props","useState","active","setActive","useEffect","active_index","allTask","map","elem","index","key","id","className","justify","onClick","activeTask","span","name","comments","length","newArr","filter","deleteHandle","Comments","setComments","comment","setComment","value","setValue","TextArea","Input","undefined","allign","onKeyDown","event","ctrlKey","keyCode","arr","push","target","onChange","e","MainApp","setTask","placeholder","Math","random","initialState","persistedState","serializedState","localStorage","getItem","JSON","parse","console","log","loadFromLocalStorage","store","createStore","combineReducers","action","subscribe","stringify","setItem","saveToLocalStorage","getState","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7b081858.chunk.js","sourcesContent":["export const ADD_TASK = 'ADD_TASK';\r\nexport const DELETE_TASK = 'DELETE_TASK';\r\nexport const SET_QUANTITY = 'SET_QUANTITY';\r\nexport const SET_COMMENTS = 'SET_COMMENTS';\r\n\r\nexport const setTask = task => ({\r\n    type: ADD_TASK,\r\n    payload: task\r\n});\r\n\r\nexport const deleteTask = task => ({\r\n    type: DELETE_TASK,\r\n    payload: task\r\n});\r\n\r\nexport const getQuantity = payload => ({\r\n    type: SET_QUANTITY,\r\n    payload: payload\r\n});\r\n\r\nexport const setComments = comments => ({\r\n    type: SET_COMMENTS,\r\n    payload: comments\r\n});","import React, {useState, useEffect} from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { deleteTask, getQuantity } from \"../../store/actions\";\r\nimport {Button, Col, Row} from \"antd\";\r\n\r\nexport const Tasks = connect(state => state, { deleteTask, getQuantity})((props) =>{\r\n\r\n    const [active, setActive] = useState();\r\n\r\n    const deleteHandle = (id) =>{\r\n        let newArr = props.task.allTask.filter(elem =>{\r\n            return elem.id !== id\r\n        });\r\n        props.deleteTask(newArr)\r\n    };\r\n\r\n    const activeTask = (index) =>{\r\n        setActive(index);\r\n    };\r\n\r\n    useEffect(() =>{\r\n        props.getQuantity({active_index: active})\r\n    },[active]);\r\n\r\n    return(\r\n        <div>\r\n            {props.task.allTask ? props.task.allTask.map((elem, index) => {\r\n                    return(\r\n                        <Row key={elem.id} className={active === index ? 'wrapper-task row active' : 'wrapper-task row'}\r\n                             type='flex' justify='space-between'>\r\n                            <Col onClick={() => activeTask(index)} span={20}>\r\n                                <ul className='ul'>\r\n                                    <li>{elem.name}</li>\r\n                                    <span className='quantity'>{elem.comments.length}</span>\r\n                                </ul>\r\n                            </Col>\r\n                            <Col span={3}>\r\n                                <Button onClick={() => deleteHandle(elem.id)} className='delete-btn'>Delete</Button>\r\n                            </Col>\r\n                        </Row>\r\n                    )\r\n                }\r\n            ) : null\r\n            }\r\n        </div>\r\n    )\r\n});","import React, {useEffect, useState} from \"react\";\r\nimport { Input, Row, Col } from \"antd\";\r\nimport {connect} from \"react-redux\";\r\nimport {setComments, deleteTask} from \"../../store/actions\";\r\n\r\n// const mapStateToProps = state => ({\r\n//     allTask: state.task.allTask,\r\n//     active_index: state.task.active_index\r\n// });\r\n\r\nexport const Comments = connect(state => state, {setComments,deleteTask})( (props) =>{\r\n\r\n    const [comment, setComment] = useState();\r\n    const [value, setValue] = useState('');\r\n\r\n    const { TextArea } = Input;\r\n    const handleKey = (event) =>{\r\n        if (event.ctrlKey && event.keyCode === 13) {\r\n            let arr = props.task.allTask;\r\n            if (props.task.active_index !== undefined && props.task.active_index !== null){ arr[props.task.active_index].comments.push(event.target.value);\r\n                props.setComments(arr);\r\n                setValue('');\r\n                setComment(props.task.allTask[props.task.active_index].comments.map((elem, index) => <Row className='row wrapper-task' key={index}>\r\n                            <Col span={4}>\r\n                                <div className='photo'></div>\r\n                            </Col>\r\n                            <Col span={19}>\r\n                                <p className='text-comment'>{elem}</p>\r\n                            </Col>\r\n                </Row>\r\n                ))\r\n            }\r\n        }\r\n    };\r\n\r\n    useEffect(() =>{\r\n        if (props.task.active_index !== undefined && props.task.active_index !== null){\r\n            setComment(props.task.allTask[props.task.active_index].comments.map((elem, index) =>\r\n                    <Row className='row wrapper-task' key={index}>\r\n                        <Col span={4}>\r\n                            <div className='photo'></div>\r\n                        </Col>\r\n                        <Col span={17}>\r\n                            <p className='text-comment'>{elem}</p>\r\n                        </Col>\r\n                    </Row>\r\n            ))\r\n        }\r\n    }, [props.task.active_index]);\r\n\r\n    useEffect(() =>{\r\n        setComment('')\r\n    }, []);\r\n\r\n    return(\r\n        <div className='comments-wrapper'>\r\n            <Row className='row'>\r\n                <Col span={3}>\r\n                    <h2 className='title'>Comments #{props.task.active_index !== undefined  ? props.task.active_index +1 : null}</h2>\r\n                </Col>\r\n            </Row>\r\n            <div className='wrapper-comments'>\r\n                {comment}\r\n            </div>\r\n            <Row className='comment row' type='flex' justify='center' allign='bottom'>\r\n                <Col span={3}>\r\n                    <div className='image'></div>\r\n                </Col>\r\n                <Col span={20}>\r\n                    <TextArea className='text-area' allign='bottom' onKeyDown={handleKey} onChange={e => setValue(e.target.value)} value={value} />\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n});","import React, { useState} from 'react';\r\nimport { Input, Row, Col, Button } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport '../style/style.scss'\r\nimport {connect} from 'react-redux'\r\nimport { setTask } from '../../store/actions'\r\nimport { Tasks } from \"../Tasks\";\r\nimport {Comments} from \"../Comments\";\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    allTask: state.task.allTask\r\n});\r\n\r\nexport const MainApp = connect(mapStateToProps, { setTask }) (props =>{\r\n    const [value, setValue] = useState();\r\n\r\n    const createHandle = () =>{\r\n        if (value !== ''){\r\n            props.setTask({\r\n                name: value,\r\n                id: Math.random(),\r\n                comments: []\r\n            });\r\n        }\r\n        setValue('');\r\n    };\r\n\r\n    return(\r\n     <div className='wrapper-background'>\r\n         <div className='wrapper-blocks'>\r\n         <div className='items'>\r\n         <Row className='row'>\r\n             <Col span={3}>\r\n                 <h2 className='title'>Items</h2>\r\n             </Col>\r\n         </Row>\r\n         <Row className='row' type='flex' justify='space-between'>\r\n             <Col span={15}>\r\n                 <Input onChange={e => setValue(e.target.value)} value={value} placeholder=\"Type name here\"/>\r\n             </Col>\r\n             <Col span={3}>\r\n                 <Button onClick={createHandle} className='add-btn' type=\"primary\">Add new</Button>\r\n             </Col>\r\n         </Row>\r\n             <div className='scroll-items'>\r\n                <Tasks />\r\n             </div>\r\n         </div>\r\n                 <div className='comments'>\r\n                     <Comments />\r\n                 </div>\r\n         </div>\r\n     </div>\r\n    )\r\n});\r\n","import { createStore, combineReducers } from \"redux\";\r\nimport {ADD_TASK, DELETE_TASK, SET_COMMENTS, SET_QUANTITY} from \"../actions\";\r\n\r\nconst initialState = {\r\n    allTask: [],\r\n    active_index: ''\r\n};\r\n\r\nconst taskReducer = (state = initialState, action) =>{\r\n    const {type, payload} = action;\r\n    switch(type){\r\n        case ADD_TASK:\r\n            return {...state,\r\n                allTask: [\r\n                    ...state.allTask,\r\n                    payload\r\n                ]\r\n            };\r\n\r\n        case DELETE_TASK:\r\n            return {...state,\r\n                allTask: payload\r\n            };\r\n\r\n        case SET_QUANTITY:\r\n            return {\r\n                ...state, active_index: payload.active_index\r\n            };\r\n\r\n        case SET_COMMENTS:\r\n            return {...state,\r\n                allTask: payload\r\n            };\r\n\r\n\r\n        default:\r\n            return{ ...state }\r\n    }\r\n};\r\n\r\nfunction saveToLocalStorage(state) {\r\n    try{\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('state', serializedState)\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n}\r\n\r\nfunction loadFromLocalStorage() {\r\n    try{\r\n        const serializedState = localStorage.getItem('state');\r\n        if(serializedState === null) return undefined;\r\n        return JSON.parse(serializedState)\r\n    } catch (e) {\r\n        console.log(e);\r\n        return undefined\r\n    }\r\n}\r\n\r\nconst persistedState = loadFromLocalStorage();\r\n\r\nconst store = createStore(\r\n    combineReducers({ task: taskReducer }),\r\n    persistedState\r\n);\r\n\r\nstore.subscribe(() =>saveToLocalStorage(store.getState()));\r\n\r\nexport default store","import React from 'react';\nimport {Provider} from 'react-redux'\nimport { MainApp} from \"./components/MainApp\";\nimport store from \"./store/reducers\";\n\nfunction App() {\n  return (\n      <Provider store={store}>\n        <div className=\"App\">\n            <MainApp/>\n        </div>\n      </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}